{"version":3,"sources":["components/Card.js","components/Modal.js","components/Contacts.js","App.js","serviceWorker.js","index.js"],"names":["CardComponent","_ref","user","deleteUser","modifyUser","react_default","a","createElement","className","src","alt","first_name","last_name","onClick","Object","assign","href","twitter","facebook","Modal","show","saveHandler","closeHandler","changeHandler","type","name","value","onChange","required","Contacts","props","_getPrototypeOf2","_this","classCallCheck","this","_len","arguments","length","rest","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","newUser","showModal","contacts","modalSaveHandler","saveDataModal","bind","assertThisInitialized","checkContactInState","addContact","removeContact","editContact","toggleModal","handleChange","updateContact","contact","newContacts","push","setState","filter","arr_contact","_","isEqual","oldUser","newInfo","oldInfo","index","findIndex","url","test","event","newState","target","addHttp","_this2","map","item","key","components_Card","components_Modal","Component","App","src_components_Contacts","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","forEach","head","insertAdjacentHTML","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1220cb80.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React from 'react';\nimport './Card.scss'\n\n\nconst CardComponent = ({user, deleteUser, modifyUser}) => (\n    <article className=\"card\">\n        <header>\n            <img src={'https://i0.wp.com/www.winhelponline.com/blog/wp-content/uploads/2017/12/user.png?fit=256%2C256&quality=100&ssl=1'} alt={user.first_name + ' ' + (user.last_name || '')}></img>\n            <h3>{user.first_name + ' ' + (user.last_name || '')}</h3>\n        </header>\n        <div>\n            <p onClick={()=>deleteUser(user)}>Eliminar</p>\n            <p onClick={()=> modifyUser(Object.assign({},user))}>Editar</p>\n        </div>\n        <footer>\n            <a href={user.twitter}>\n                    <i className=\"fab fa-twitter\"></i>\n            </a>\n            <a href={user.facebook}>\n                    <i className=\"fab fa-facebook\"></i>\n            </a>\n        </footer>\n    </article>\n);\n\nCardComponent.propTypes = {\n    name: PropTypes.object,\n    profile_pic: PropTypes.string,\n    fav_social: PropTypes.object,\n};\n\nexport default CardComponent;","import React from 'react';\n\nimport './Modal.scss';\n\n\nfunction Modal ({show, saveHandler, closeHandler, changeHandler, user}) {\n\n        return (\n            <div className={\"modal \" + (show ? \"\" : \"hide\")}>\n                <div className=\"modal-container\">\n                    <div className=\"modal__body\">\n                        <label>Nombre: </label><input  type=\"text\" name=\"first_name\" value={user.first_name} onChange={changeHandler} required/>\n                        <label>Apellido: </label><input  type=\"text\" name=\"last_name\" value={user.last_name} onChange={changeHandler} required/>\n                        <br/> <br/>\n                        Redes Sociales: <br /><br />\n                        <label>Twitter: </label><input  type=\"text\" name=\"twitter\" value={user.twitter} onChange={changeHandler} />\n                        <label>Facebook: </label><input  type=\"text\" name=\"facebook\" value={user.facebook} onChange={changeHandler} />\n                    </div>\n                    <div className=\"modal__footer\">\n                        <div className=\"button button--close\" onClick={closeHandler}>\n                            <i className=\"fas fa-times\"></i> Cerrar\n                        </div>\n                        <div className=\"button button--save\" onClick={saveHandler}>\n                            <i className=\"fas fa-check\"></i> Guardar\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n}\n\nModal.propTypes = {};\n\nexport default Modal ;","import React, { Component } from 'react';\nimport _ from 'lodash';\nimport './Contacts.scss';\n\nimport CardComponent from './Card';\nimport Modal from './Modal';\n \n\nclass Contacts extends Component {\n    constructor(props, ...rest) {\n        super(props, ...rest);\n        this.state = {\n            newUser: {\n                first_name: '',\n                last_name: '',\n                twitter: '',\n                facebook: ''\n            },\n\n            showModal: false,\n            contacts: [],\n            modalSaveHandler: this.saveDataModal.bind(this),\n            // modalSaveHandler: this.saveDataModal.bind(this)\n        };\n\n\n        this.checkContactInState = this.checkContactInState.bind(this);\n        this.addContact = this.addContact.bind(this);\n        this.removeContact = this.removeContact.bind(this);\n        this.editContact = this.editContact.bind(this);\n        this.toggleModal = this.toggleModal.bind(this);\n        this.saveDataModal = this.saveDataModal.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.updateContact = this.updateContact.bind(this);\n    }\n    /**\n     * add new contact to state\n     * @param  {Object} contact contact object\n     * @returns {Boolean} true if added correctly, false if contact is already on state\n     */\n    addContact(contact) {\n\n        if(this.checkContactInState(contact)) return false;\n\n        const newContacts = this.state.contacts;\n        newContacts.push(contact);\n\n        this.setState({contacts: newContacts});\n        return true;\n    }\n    /**\n     * removes contact from state\n     * @param  {Object} contact contact object\n     */\n    removeContact(contact) {\n        const newContacts = this.state.contacts.filter(arr_contact => !_.isEqual(contact, arr_contact));\n        \n        this.setState({contacts: newContacts});\n    }\n    /**\n     * edits contact info\n     * @param  {Object} contact contact object\n     */\n    editContact(contact){\n        \n        this.setState({\n            newUser: contact,\n            oldUser: Object.assign({}, contact)\n        });\n        this.toggleModal();\n\n        this.setState({\n            modalSaveHandler: this.updateContact\n        });\n        \n    }\n    \n    updateContact() {\n        const newInfo = this.state.newUser;\n        const oldInfo = this.state.oldUser;\n\n        const newContacts = this.state.contacts;\n        let index = newContacts.findIndex(arr_contact => _.isEqual(arr_contact, oldInfo));\n        newContacts[index] = newInfo;\n\n        this.setState({contacts: newContacts});\n        this.toggleModal();\n\n    }\n\n    /**\n     * checks if contact is already in state\n     * @param  {Object} contact contact to check in state\n     * @returns {Boolean} true if there is a user, false if no user found\n     */\n    checkContactInState(contact) {\n        const res = this.state.contacts.filter(arr_contact => _.isEqual(arr_contact, contact));\n        return res.length >= 1;\n    }\n\n    toggleModal() {\n        this.setState(state => ({\n            showModal: !state.showModal\n        }));\n    }\n\n    saveDataModal() {\n        this.addContact(this.state.newUser);\n        this.setState(state => ({\n            newUser: {\n                first_name: '',\n                last_name: '',\n                twitter: '',\n                facebook: ''\n            }\n        }));\n        this.toggleModal();\n    }\n\n\n    addHttp(url) {\n        if (!/^(f|ht)tps?:\\/\\//i.test(url)) {\n        \n           url = \"http://\" + url;\n        }\n        return url;\n     }\n    handleChange(event) {\n        // event.preventDefault();\n        let newState = this.state.newUser;\n        switch (event.target.name){\n            case 'first_name': \n                newState.first_name = event.target.value;\n                this.setState({newUser: newState});\n            break;\n            case 'last_name': \n                newState.last_name = event.target.value;\n                this.setState({newUser: newState});\n\n            break;\n            case 'twitter': \n                newState.twitter = this.addHttp(event.target.value);\n                this.setState({newUser: newState});\n\n            break;\n            case 'facebook': \n                newState.facebook = this.addHttp(event.target.value);\n                this.setState({newUser: newState});\n\n            break;\n            default:\n            break;\n\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <div className=\"contacts-container\">\n                    {this.state.contacts.map((item, key) =>{\n                        return (<CardComponent user={item} key={key} deleteUser={this.removeContact} modifyUser={this.editContact}/>);\n                    })}\n                    <div className=\"card add-contact\" >\n                        <button onClick={this.toggleModal}> \n                            Añadir Nuevo Contacto\n                        </button>\n                    </div>\n                </div>\n                <Modal \n                    user={this.state.newUser}\n                    closeHandler={this.toggleModal} \n                    show={this.state.showModal} \n                    saveHandler={this.state.modalSaveHandler}\n                    changeHandler={this.handleChange}\n                    > \n                </Modal>\n            </div>\n        );\n    }\n}\n\nContacts.propTypes = {};\n\nexport default Contacts;","import React from 'react';\nimport Contacts from './components/Contacts';\nimport './App.scss';\n\nfunction App() { \n     return (\n      <div className=\"App\">\n        <h1>Not Facebook</h1>\n        <Contacts />\n      </div>\n     )\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// Inserting css imports in document head\n\nlet imports = [\n    '<link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.8.1/css/all.css\" integrity=\"sha384-50oBUHEmvpQ+1lW4y57PTFmhCaXp0ML5d60M1M7uH2+nqUivzIebhndOJK28anvf\" crossorigin=\"anonymous\">',\n];\n\nimports.forEach((item) => {\n    let docHead = document.head;\n    // let node = document.createElement('link', )\n    docHead.insertAdjacentHTML('beforeend',item);\n});\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}